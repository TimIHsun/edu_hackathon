# -*- coding: utf-8 -*-
"""活動敘述斷字-整理版.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GuJrUbBrMFW15mfXeanmo92LQ0z0E-HL

# final code
"""

# 字庫
tech = ['科技','資料','數據','排版力','統整力','遊戲','程式','機器人','感測器','軍事','工程','智慧','電子','智能','電機','邏輯','手機','C/C++','Python','python']
self_grow = ['熱忱','潛力','內涵','美育','水準','職涯','時光','志工','服務隊''家庭','情緒','公益','精神','履歷','人際','工作','能力']
business = ['會議','簡報','效益','行銷','商務','電商','廠商','整合性','商業','組織','團體','行動','團隊','行銷','業師','企業','目的','事業','貸款','利息','負擔','部門','人才','產業','金融','文案']
art_culture = ['原住民','布袋戲','文青','陶罐','劇團','演員','文物','廣播劇','觀眾','衛武營','聲音','戲劇','美食尋味','光景','美食','手工','藝品','見聞','建築','景觀','時尚','視覺','品質','美學','素養','旅人','院藏','設計','特色','文化','內涵','文學','客家','陶藝','藝術','繪本','舞台','影片','服裝','故事','美感','技藝','藏蹟','大師','常設展','設計力']
social = ['生活','人權','史料','郁永河','政府','市民','教育','行動','公眾','使命感','社造','理想','使命感','人文','資源','政府','培力','計畫','地方','社會','預算','公民','議題','風氣','國際法','水土','硫情','歷史','陪葬品','溫度','國家','大觀','留美子','遺產','聯合物','鳳凰']
natural = ['科學','細胞','蛤','蝦','蟹苗','海','生命','海岸線','珊瑚','斜坡','星空','天文','望遠鏡','科學營','火山','地形','鯨豚','能源','發電機','環境','微生物','DNA','海巡','災害','研習營','海洋','奈米','風力','動物','生態','磺石','生物','生活','趣味','物理','化學','數學','自然','水域','螢火蟲','海狸','奧林匹亞']
algriculture = ['農創','農業','農民','青農','耕讀生活趣','大地','農企業']
rd = ['創意性','思維','方案','形塑','創意','學研','創生']
medical = ['醫學','護理','化妝品','心理','醫藥','疫情']
language = ['客家','語言','英語','俄文']
pe = ['風箏','帆船','獨木舟','休閒活動','救生衣','裝備','美姿','美儀','棒球']

# import ckiptagger
from ckiptagger import data_utils, construct_dictionary, WS, POS, NER

ws = WS("./data")
pos = POS("./data")
ner = NER("./data")
word_to_weight = {
    "C/C++": 2,
    "python": 1,
    "Python": 2
}
dictionary = construct_dictionary(word_to_weight)

# input the description of the activity
description = [input()]

# 斷字
word_sentence_list = ws(
    description,
    # sentence_segmentation = True, # To consider delimiters
    # segment_delimiter_set = {",", "。", ":", "?", "!", ";"}), # This is the defualt set of delimiters
    # recommend_dictionary = dictionary1, # words in this dictionary are encouraged
    coerce_dictionary = dictionary, # words in this dictionary are forced
)

pos_sentence_list = pos(word_sentence_list)
entity_sentence_list = ner(word_sentence_list, pos_sentence_list)

## find appear most and secondary words
def get_key (dict, value):  # 取出對應value的key,存成list
  return [k for k, v in dict.items() if v == value]


def appear_most_two_word(word_sentence, pos_sentence):  # get appear secondary words
    assert len(word_sentence) == len(pos_sentence)
    words = []
    for word, pos in zip(word_sentence, pos_sentence):
      if pos in ("Na","Nb","Nes""VH","Vc","Va"):
        words.append(word)

    count_word = dict((w, words.count(w)) for w in words)  # 看詞的個數
    maximum = get_key(count_word, max(count_word.values()))  # get出現最多詞的詞

    for i in maximum:
      del count_word[i]  # 去除出現最多次的詞
    if not count_word:
      second = "(there are no second)"
    else:
      second = get_key(count_word, max(count_word.values()))  # 取出出現第二多的詞

    return [maximum, second]

### get the critical words
for i in range(0,len(word_sentence_list)):
  most_two = appear_most_two_word(word_sentence_list[i],  pos_sentence_list[i])
  most_words = most_two[0]
  secondary_words = most_two[1]


# the category of the most words and secondary words belong to
def get_category(key_words):
  words_category = []
  for mw in key_words:
    if mw in tech:
      words_category.append('資訊科技')
    elif mw in self_grow:
      words_category.append('自我成長')
    elif mw in business:
      words_category.append('商業管理')
    elif mw in art_culture:
      words_category.append('藝術文化')
    elif mw in social:
      words_category.append('社會人文')
    elif mw in natural:
      words_category.append('自然科學')
    elif mw in algriculture:
      words_category.append('智慧農業')
    elif mw in rd:
      words_category.append('創新創業')
    elif mw in medical:
      words_category.append('醫藥衛生')
    elif mw in language:
      words_category.append('語言學習')
    elif mw in pe:
      words_category.append('健康體育')
  
  category_counts = dict((w, words_category.count(w)) for w in words_category)

  if bool(category_counts) == True:
    return get_key(category_counts, max(category_counts.values()))
  else:
    return 'NA'

words_cateogry_dic = {"most_words_category": get_category(most_words), "second_words_category": get_category(secondary_words)}
print(words_category)